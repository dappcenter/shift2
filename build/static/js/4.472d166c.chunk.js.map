{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/Tooltip/Tooltip.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/components/Select/Select.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAdresses","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","split","variant","StyledTokenInput","input","isWarning","shadows","warning","inset","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","style","position","pl","fontSize","toLocaleString","placeholder","scale","mr","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","handleSelectMax","title","ModalActions","disabled","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","HarvestAction","earnings","account","useWeb3React","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","RainbowLight","keyframes","StyledCardAccent","FCard","Divider","borderColor","ExpandingWrapper","props","FarmCard","bnbPrice","ethPrice","showExpandableSection","setShowExpandableSection","communityFarms","includes","toLocaleLowerCase","totalValue","lpTotalInQuoteToken","quoteTokenSymbol","QuoteToken","BNB","SHIFT","ETH","Number","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","display","CardActionsContainer","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","Amount","span","earned","textDisabled","Earned","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","TooltipContent","tooltip","background","zIndices","modal","Tooltip","content","children","MultiplierWrapper","Multiplier","displayMultipler","toLowerCase","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","userData","earningsBigNumber","usePriceCakeBusd","earningsBusd","multipliedBy","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","useEffect","current","lg","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","bsc","info","name","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","InputWrapper","SearchInput","setToggled","inputEl","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","DropDownHeader","inputSecondary","DropDownListContainer","dropdown","DropDownContainer","isOpen","css","boxShadow","DropDownList","ul","ListItem","li","Select","options","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","Header","gradients","bubblegum","Farms","path","pathname","useLocation","farmsLP","useFarms","usePriceBnbBusd","query","setQuery","setViewMode","ethPriceUsd","usePriceEthBusd","sortOption","setSortOption","dispatch","useDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","stackedOnly","setStackedOnly","activeFarms","filter","inactiveFarms","stackedOnlyFarms","farmsList","farmsToDisplay","cakePriceVsBNB","find","SHIFT_POOL_PID","tokenPriceVsQuote","farmsToDisplayWithAPY","tokenAmount","cakeRewardPerBlock","SHIFT_PER_BLOCK","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","BUSD","UST","cakeApy","dualApy","rewardPerBlock","plus","lowercaseQuery","isActive","farmsStaked","rowData","farms","orderBy","slice","sortFarms","size","padding","Page","checked","marginLeft","target","length","sort","b","exact","renderContent"],"mappings":"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","file":"static/js/4.472d166c.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APY: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    translationId: 999,\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 12px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"22px\">\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const TranslateString = useI18n()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {TranslateString(452, 'Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          No tokens to stake:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {TranslateString(999, 'get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={TranslateString(1070, 'Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {TranslateString(999, 'Get')} {tokenName}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={TranslateString(588, 'Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWeb3React } from '@web3-react/core'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(562, 'Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(758, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          ?\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1072, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1074, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting SHIFT balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting SHIFT balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  addLiquidityUrl?: string\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  cakePrice,\n  apy,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(860, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(858, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(864, 'SHIFT per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          866,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: rgb(31,31,51);\r\n  );\r\n  background-size: 200% 200%;\r\n  // animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 22px;\r\n  // filter: blur(6px);\r\n  position: absolute;\r\n  margin-top: 20px;\r\n  top:  8px;\r\n  right: 2px;\r\n  bottom: 22px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: rgb(31,31,51)\r\n  border-radius: 22px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 42px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 2px;\r\n  margin: 11px auto;\r\n  width: 20%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethPrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethPrice, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. SHIFT-BNB LP, LINK-BNB LP,\r\n  // NAR-SHIFT LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.SHIFT) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n      return ethPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, ethPrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANSHIFT', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'SHIFT'\r\n\r\n  const farmAPY =\r\n    farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const { quoteTokenAdresses, tokenAddresses } = farm\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'SHIFT' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={isCommunityFarm}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(736, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address, QuoteToken } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport useI18n from 'hooks/useI18n'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  quoteTokenAdresses: Address\n  quoteTokenSymbol: QuoteToken\n  tokenAddresses: Address\n  cakePrice: BigNumber\n  originalValue: BigNumber\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  quoteTokenAdresses,\n  tokenAddresses,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  return (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apy={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>{TranslateString(656, 'Loading...')}</AprWrapper>\n      )}\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { Text, Image } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const TranslateString = useI18n()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {TranslateString(999, 'FARMING')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\n  const { account } = useWeb3React()\n  const displayBalance = earnings !== null && account ? earnings.toLocaleString() : '?'\n\n  return <Amount earned={earnings}>{displayBalance}</Amount>\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && 'Details'}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface TooltipProps {\n  content: React.ReactNode\n}\n\nconst TooltipContent = styled.div`\n  background: ${({ theme }) => theme.tooltip.background};\n  padding: 16px;\n  border-radius: 16px;\n  color: ${({ theme }) => theme.tooltip.text};\n  width: max-content;\n  display: none;\n  padding: 16px;\n  max-height: 500px;\n  z-index: ${({ theme }) => theme.zIndices.modal};\n  position: absolute;\n  bottom: calc(100% + 16px);\n  transform: translate(34px, 0);\n  right: 0;\n  max-width: 246px;\n\n  &:after {\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 10px solid ${({ theme }) => theme.tooltip.background};\n    bottom: 0;\n    position: absolute;\n    transform: translate(-34px, 9px);\n    right: 0;\n  }\n`\n\nconst Container = styled.div`\n  position: relative;\n\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\n    display: block;\n  }\n`\n\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children }) => {\n  return (\n    <Container>\n      {children}\n      <TooltipContent>{content}</TooltipContent>\n    </Container>\n  )\n}\n\nexport default Tooltip\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 66px;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultipler = multiplier ? multiplier.toLowerCase() : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultipler}</MultiplierWrapper>\n      <Tooltip\n        content={\n          <div>\n            {TranslateString(999, 'The multiplier represents the amount of token rewards each farm gets.')}\n            <br />\n            <br />\n            {TranslateString(\n              999,\n              'For example, if a 1x farm was getting 1 token per block, a 40x farm would be getting 40 tokens per block.',\n            )}\n          </div>\n        }\n      >\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface LiquidityProps {\n  liquidity: number\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity = liquidity\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <Tooltip content={TranslateString(999, 'The total value of the funds in this farm’s liquidity pool')}>\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useHarvest } from 'hooks/useHarvest'\nimport useI18n from 'hooks/useI18n'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useCountUp } from 'react-countup'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\nconst HarvestAction: React.FunctionComponent<FarmWithStakedValue> = ({ pid, userData }) => {\n  const { account } = useWeb3React()\n  const earningsBigNumber = userData && account ? new BigNumber(userData.earnings) : null\n  const cakePrice = usePriceCakeBusd()\n  let earnings = null\n  let earningsBusd = 0\n  let displayBalance = '? ? ?'\n\n  if (earningsBigNumber) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const TranslateString = useI18n()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>SHIFT </Title>\n        <Subtle>EARNED</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          <Staked>~{countUp}USD</Staked>\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !account}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from '@pancakeswap-libs/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser } from 'state/hooks'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useI18n from 'hooks/useI18n'\nimport { useApprove } from 'hooks/useApprove'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\n\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\nconst Staked: React.FunctionComponent<FarmWithStakedValue> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteTokenAdresses,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (rawStakedBalance) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\n            {TranslateString(999, 'Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {TranslateString(999, 'Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { LinkExternal, Text } from '@pancakeswap-libs/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { communityFarms } from 'config/constants'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, multiplier, liquidity }) => {\n  const farm = details\n\n  const TranslateString = useI18n()\n  const { quoteTokenAdresses, tokenAddresses, tokenSymbol, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANSHIFT', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = `https://bscscan.com/address/${lpAddress}`\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\n  const isCommunityFarm = communityFarms.includes(tokenSymbol)\n\n  return (\n    <Container>\n      <InfoContainer>\n        <StakeContainer>\n          <StyledLinkExternal href={`https://pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n            {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n          </StyledLinkExternal>\n        </StakeContainer>\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{TranslateString(736, 'APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} />\n        <StakedAction {...farm} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 1px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 14px solid #000000;\n  border-radius: 25px;\n  background: rgb(33, 33, 51);\n  margin-bottom: 22px;\n  \n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowProps> = (props) => {\n  const { details } = props\n  \n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\n  const TranslateString = useI18n()\n\n  const toggleActionPanel = () => {\n    setActionPanelToggled(!actionPanelToggled)\n  }\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelToggled} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={TranslateString(736, 'APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\n                      >\n                        {React.createElement(cells[key], props[key])}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={TranslateString(1072, 'Earned')}>\n                <Earned {...props.earned} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={TranslateString(736, 'APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelToggled} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {actionPanelToggled && details && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n}\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const TranslateString = useI18n()\n  const { data, columns } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {TranslateString(999, 'To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = () => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(1198, 'Live')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(388, 'Finished')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useState, useRef } from 'react'\nimport { Input } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\n  const [toggled, setToggled] = useState(false)\n  const inputEl = useRef(null)\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          ref={inputEl}\n          value={value}\n          onChange={onChange}\n          placeholder=\"Search farms\"\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToogleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToogleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from '@pancakeswap-libs/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text>{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { BLOCKS_PER_YEAR, SHIFT_PER_BLOCK, SHIFT_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { orderBy } from 'lodash'\n\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport SearchInput from './components/SearchInput'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport Select, { OptionProps } from './components/Select/Select'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    background: rgb(33, 33, 49);\n\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nconst Header = styled.div`\n  padding: 22px 0px;\n  // background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  margin-left: 16%;\n\n  padding-left: 76px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useState(ViewMode.TABLE)\n  const ethPriceUsd = usePriceEthBusd()\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stackedOnly, setStackedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n\n  const stackedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n    switch (sortOption) {\n      case 'apr':\n        return orderBy(farms, 'apy', 'desc')\n      case 'multiplier':\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.multiplier.slice(0, -1)), 'desc')\n      case 'earned':\n        return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\n      case 'liquidity':\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n      default:\n        return farms\n    }\n  }\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay): FarmWithStakedValue[] => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === SHIFT_POOL_PID)?.tokenPriceVsQuote || 0)\n      let farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = SHIFT_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD || farm.quoteTokenSymbol === QuoteToken.UST) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n          apy = cakePrice.div(ethPriceUsd).times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n        } else if (farm.quoteTokenSymbol === QuoteToken.SHIFT) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        let liquidity = farm.lpTotalInQuoteToken\n\n        if (!farm.lpTotalInQuoteToken) {\n          liquidity = null\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          liquidity = bnbPrice.times(farm.lpTotalInQuoteToken)\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.SHIFT) {\n          liquidity = cakePrice.times(farm.lpTotalInQuoteToken)\n        }\n\n        if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n          liquidity = ethPriceUsd.times(farm.lpTotalInQuoteToken)\n        }\n\n        return { ...farm, apy, liquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = query.toLowerCase()\n        farmsToDisplayWithAPY = farmsToDisplayWithAPY.filter((farm: FarmWithStakedValue) => {\n          if (farm.lpSymbol.toLowerCase().includes(lowercaseQuery)) {\n            return true\n          }\n\n          return false\n        })\n      }\n      return farmsToDisplayWithAPY\n    },\n    [bnbPrice, farmsLP, query, cakePrice, ethPriceUsd],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const isActive = !pathname.includes('history')\n  let farmsStaked = []\n  if (isActive) {\n    farmsStaked = stackedOnly ? farmsList(stackedOnlyFarms) : farmsList(activeFarms)\n  } else {\n    farmsStaked = farmsList(inactiveFarms)\n  }\n\n  farmsStaked = sortFarms(farmsStaked)\n\n  const rowData = farmsStaked.map((farm) => {\n    const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANSHIFT', '')\n\n    const row: RowProps = {\n      apr: {\n        value:\n          farm.apy &&\n          farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        quoteTokenAdresses,\n        quoteTokenSymbol,\n        tokenAddresses,\n        cakePrice,\n        originalValue: farm.apy,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: farm.userData ? getBalanceNumber(new BigNumber(farm.userData.earnings)) : null,\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                bnbPrice={bnbPrice}\n                cakePrice={cakePrice}\n                ethPrice={ethPriceUsd}\n                account={account}\n                removed={false}\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                bnbPrice={bnbPrice}\n                cakePrice={cakePrice}\n                ethPrice={ethPriceUsd}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <Header>\n        <Heading as=\"h3\" size=\"xxl\" color=\"white\" mb=\"4px\" padding=\"80px\">\n          {TranslateString(999, 'LIQUIDITY FARM')}\n        </Heading>\n      \n      </Header>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stackedOnly} onChange={() => setStackedOnly(!stackedOnly)} scale=\"sm\" />\n              <Text> {TranslateString(1116, 'Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text>FILTER BY</Text>\n              <Select\n                options={[\n                  {\n                    label: 'APR',\n                    value: 'apr',\n                  },\n                  {\n                    label: 'APR',\n                    value: 'apr',\n                  },\n                  {\n                    label: 'Multiplier',\n                    value: 'multiplier',\n                  },\n                  {\n                    label: 'Earned',\n                    value: 'earned',\n                  },\n                  {\n                    label: 'Liquidity',\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text>SEARCH</Text>\n              <SearchInput onChange={handleChangeQuery} value={query} />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        {/* <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} /> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}