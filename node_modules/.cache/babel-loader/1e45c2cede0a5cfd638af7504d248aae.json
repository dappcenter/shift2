{"ast":null,"code":"import BigNumber from'bignumber.js';import{BLOCKS_PER_YEAR}from'config';/**\n * Get the APY value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APY is NaN or infinite.\n */export var getPoolApy=function getPoolApy(stakingTokenPrice,rewardTokenPrice,totalStaked,tokenPerBlock){var totalRewardPricePerYear=new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR);var totalStakingTokenInPool=new BigNumber(stakingTokenPrice).times(totalStaked);var apy=totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);return apy.isNaN()||!apy.isFinite()?null:apy.toNumber();};export default null;","map":{"version":3,"sources":["/Users/rp/Desktop/death/answers/src/utils/apy.ts"],"names":["BigNumber","BLOCKS_PER_YEAR","getPoolApy","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","times","totalStakingTokenInPool","apy","div","isNaN","isFinite","toNumber"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,eAAT,KAAgC,QAAhC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CACxBC,iBADwB,CAExBC,gBAFwB,CAGxBC,WAHwB,CAIxBC,aAJwB,CAKrB,CACH,GAAMC,CAAAA,uBAAuB,CAAG,GAAIP,CAAAA,SAAJ,CAAcI,gBAAd,EAAgCI,KAAhC,CAAsCF,aAAtC,EAAqDE,KAArD,CAA2DP,eAA3D,CAAhC,CACA,GAAMQ,CAAAA,uBAAuB,CAAG,GAAIT,CAAAA,SAAJ,CAAcG,iBAAd,EAAiCK,KAAjC,CAAuCH,WAAvC,CAAhC,CACA,GAAMK,CAAAA,GAAG,CAAGH,uBAAuB,CAACI,GAAxB,CAA4BF,uBAA5B,EAAqDD,KAArD,CAA2D,GAA3D,CAAZ,CACA,MAAOE,CAAAA,GAAG,CAACE,KAAJ,IAAe,CAACF,GAAG,CAACG,QAAJ,EAAhB,CAAiC,IAAjC,CAAwCH,GAAG,CAACI,QAAJ,EAA/C,CACD,CAVM,CAYP,cAAe,KAAf","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { BLOCKS_PER_YEAR } from 'config'\n\n/**\n * Get the APY value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APY is NaN or infinite.\n */\nexport const getPoolApy = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number,\n) => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\n  const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber()\n}\n\nexport default null\n"]},"metadata":{},"sourceType":"module"}