{"ast":null,"code":"import _regeneratorRuntime from\"/Users/rp/Desktop/death/LOU10_sourcecode/toModifyFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/rp/Desktop/death/LOU10_sourcecode/toModifyFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/**\n * Get data for a specific lottery\n */var getLotteryRoundData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(lotteryNumber){var response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"https://api.pancakeswap.com/api/singleLottery?lotteryNumber=\".concat(lotteryNumber));case 3:response=_context.sent;_context.next=6;return response.json();case 6:data=_context.sent;return _context.abrupt(\"return\",data);case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);throw new Error(_context.t0);case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function getLotteryRoundData(_x){return _ref.apply(this,arguments);};}();export default getLotteryRoundData;","map":{"version":3,"sources":["/Users/rp/Desktop/death/LOU10_sourcecode/toModifyFarms/src/utils/getLotteryRoundData.ts"],"names":["getLotteryRoundData","lotteryNumber","fetch","response","json","data","Error"],"mappings":"uVAqBA;AACA;AACA,GACA,GAAMA,CAAAA,mBAAmB,0FAAG,iBAAOC,aAAP,0KAEDC,CAAAA,KAAK,uEAAgED,aAAhE,EAFJ,QAElBE,QAFkB,qCAGLA,CAAAA,QAAQ,CAACC,IAAT,EAHK,QAGlBC,IAHkB,+CAKjBA,IALiB,iEAOlB,IAAIC,CAAAA,KAAJ,aAPkB,sEAAH,kBAAnBN,CAAAA,mBAAmB,4CAAzB,CAWA,cAAeA,CAAAA,mBAAf","sourcesContent":["export type DataResponse = {\n  lotteryNumber: number\n  lotteryDate: string\n  lotteryNumbers: number[]\n  poolSize: number\n  burned: number\n  contractLink: string\n  jackpotTicket: number\n  match1Ticket: number | null\n  match2Ticket: number\n  match3Ticket: number\n  match4Ticket: number\n  poolJackpot: number\n  poolMatch3: number\n  poolMatch2: number\n  poolMatch1: number | null\n\n  // TODO: Fill in the error type\n  error: any\n}\n\n/**\n * Get data for a specific lottery\n */\nconst getLotteryRoundData = async (lotteryNumber: number): Promise<DataResponse> => {\n  try {\n    const response = await fetch(`https://api.pancakeswap.com/api/singleLottery?lotteryNumber=${lotteryNumber}`)\n    const data = await response.json()\n\n    return data\n  } catch (error) {\n    throw new Error(error)\n  }\n}\n\nexport default getLotteryRoundData\n"]},"metadata":{},"sourceType":"module"}