{"ast":null,"code":"import _defineProperty from\"/Volumes/ssd500/Answers/answers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Volumes/ssd500/Answers/answers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Volumes/ssd500/Answers/answers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/ssd500/Answers/answers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import merge from'lodash/merge';import teamsList from'config/constants/teams';import{getProfileContract}from'utils/contractHelpers';import makeBatchRequest from'utils/makeBatchRequest';var profileContract=getProfileContract();export var getTeam=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(teamId){var _yield$profileContrac,teamName,numberUsers,numberPoints,isJoinable,staticTeamInfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return profileContract.methods.getTeamProfile(teamId).call();case 3:_yield$profileContrac=_context.sent;teamName=_yield$profileContrac[0];numberUsers=_yield$profileContrac[2];numberPoints=_yield$profileContrac[3];isJoinable=_yield$profileContrac[4];staticTeamInfo=teamsList.find(function(staticTeam){return staticTeam.id===teamId;});return _context.abrupt(\"return\",merge({},staticTeamInfo,{isJoinable:isJoinable,name:teamName,users:numberUsers,points:numberPoints}));case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",null);case 15:case\"end\":return _context.stop();}}},_callee,null,[[0,12]]);}));return function getTeam(_x){return _ref.apply(this,arguments);};}();/**\n * Gets on-chain data and merges it with the existing static list of teams\n */export var getTeams=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var teamsById,nbTeams,calls,i,teamData,onChainTeamData;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;teamsById=teamsList.reduce(function(accum,team){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},team.id,team));},{});_context2.next=4;return profileContract.methods.numberTeams().call();case 4:nbTeams=_context2.sent;calls=[];for(i=1;i<=nbTeams;i++){calls.push(profileContract.methods.getTeamProfile(i).call);}_context2.next=9;return makeBatchRequest(calls);case 9:teamData=_context2.sent;onChainTeamData=teamData.reduce(function(accum,team,index){var teamName=team[0],numberUsers=team[2],numberPoints=team[3],isJoinable=team[4];return _objectSpread(_objectSpread({},accum),{},_defineProperty({},index+1,{name:teamName,users:Number(numberUsers),points:Number(numberPoints),isJoinable:isJoinable}));},{});return _context2.abrupt(\"return\",merge({},teamsById,onChainTeamData));case 14:_context2.prev=14;_context2.t0=_context2[\"catch\"](0);return _context2.abrupt(\"return\",null);case 17:case\"end\":return _context2.stop();}}},_callee2,null,[[0,14]]);}));return function getTeams(){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["/Volumes/ssd500/Answers/answers/src/state/teams/helpers.ts"],"names":["merge","teamsList","getProfileContract","makeBatchRequest","profileContract","getTeam","teamId","methods","getTeamProfile","call","teamName","numberUsers","numberPoints","isJoinable","staticTeamInfo","find","staticTeam","id","name","users","points","getTeams","teamsById","reduce","accum","team","numberTeams","nbTeams","calls","i","push","teamData","onChainTeamData","index","Number"],"mappings":"slBAAA,MAAOA,CAAAA,KAAP,KAAkB,cAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CACA,OAASC,kBAAT,KAAmC,uBAAnC,CAEA,MAAOC,CAAAA,gBAAP,KAA6B,wBAA7B,CAGA,GAAMC,CAAAA,eAAe,CAAGF,kBAAkB,EAA1C,CAEA,MAAO,IAAMG,CAAAA,OAAO,0FAAG,iBAAOC,MAAP,8OAOTF,CAAAA,eAAe,CAACG,OAAhB,CAAwBC,cAAxB,CAAuCF,MAAvC,EAA+CG,IAA/C,EAPS,4CAGdC,QAHc,uBAGjB,CAHiB,EAIdC,WAJc,uBAIjB,CAJiB,EAKdC,YALc,uBAKjB,CALiB,EAMdC,UANc,uBAMjB,CANiB,EAQbC,cARa,CAQIb,SAAS,CAACc,IAAV,CAAe,SAACC,UAAD,QAAgBA,CAAAA,UAAU,CAACC,EAAX,GAAkBX,MAAlC,EAAf,CARJ,iCAUZN,KAAK,CAAC,EAAD,CAAKc,cAAL,CAAqB,CAC/BD,UAAU,CAAVA,UAD+B,CAE/BK,IAAI,CAAER,QAFyB,CAG/BS,KAAK,CAAER,WAHwB,CAI/BS,MAAM,CAAER,YAJuB,CAArB,CAVO,4FAiBZ,IAjBY,uEAAH,kBAAPP,CAAAA,OAAO,4CAAb,CAqBP;AACA;AACA,GACA,MAAO,IAAMgB,CAAAA,QAAQ,2FAAG,gNAEdC,SAFc,CAEFrB,SAAS,CAACsB,MAAV,CAAiB,SAACC,KAAD,CAAQC,IAAR,CAAiB,CAClD,sCACKD,KADL,wBAEGC,IAAI,CAACR,EAFR,CAEaQ,IAFb,GAID,CALiB,CAKf,EALe,CAFE,wBAQErB,CAAAA,eAAe,CAACG,OAAhB,CAAwBmB,WAAxB,GAAsCjB,IAAtC,EARF,QAQdkB,OARc,gBASdC,KATc,CASN,EATM,CAWpB,IAASC,CAAT,CAAa,CAAb,CAAgBA,CAAC,EAAIF,OAArB,CAA8BE,CAAC,EAA/B,CAAmC,CACjCD,KAAK,CAACE,IAAN,CAAW1B,eAAe,CAACG,OAAhB,CAAwBC,cAAxB,CAAuCqB,CAAvC,EAA0CpB,IAArD,EACD,CAbmB,uBAeIN,CAAAA,gBAAgB,CAACyB,KAAD,CAfpB,QAedG,QAfc,gBAgBdC,eAhBc,CAgBID,QAAQ,CAACR,MAAT,CAAgB,SAACC,KAAD,CAAQC,IAAR,CAAcQ,KAAd,CAAwB,IACnDvB,CAAAA,QADmD,CACUe,IADV,CACtD,CADsD,EACtCd,WADsC,CACUc,IADV,CACzC,CADyC,EACtBb,YADsB,CACUa,IADV,CACzB,CADyB,EACLZ,UADK,CACUY,IADV,CACR,CADQ,EAG9D,sCACKD,KADL,wBAEGS,KAAK,CAAG,CAFX,CAEe,CACXf,IAAI,CAAER,QADK,CAEXS,KAAK,CAAEe,MAAM,CAACvB,WAAD,CAFF,CAGXS,MAAM,CAAEc,MAAM,CAACtB,YAAD,CAHH,CAIXC,UAAU,CAAVA,UAJW,CAFf,GASD,CAZuB,CAYrB,EAZqB,CAhBJ,kCA8Bbb,KAAK,CAAC,EAAD,CAAKsB,SAAL,CAAgBU,eAAhB,CA9BQ,gGAgCb,IAhCa,yEAAH,kBAARX,CAAAA,QAAQ,2CAAd","sourcesContent":["import merge from 'lodash/merge'\nimport teamsList from 'config/constants/teams'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport { Team } from 'config/constants/types'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { TeamsById, TeamResponse } from 'state/types'\n\nconst profileContract = getProfileContract()\n\nexport const getTeam = async (teamId: number): Promise<Team> => {\n  try {\n    const {\n      0: teamName,\n      2: numberUsers,\n      3: numberPoints,\n      4: isJoinable,\n    } = await profileContract.methods.getTeamProfile(teamId).call()\n    const staticTeamInfo = teamsList.find((staticTeam) => staticTeam.id === teamId)\n\n    return merge({}, staticTeamInfo, {\n      isJoinable,\n      name: teamName,\n      users: numberUsers,\n      points: numberPoints,\n    })\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets on-chain data and merges it with the existing static list of teams\n */\nexport const getTeams = async (): Promise<TeamsById> => {\n  try {\n    const teamsById = teamsList.reduce((accum, team) => {\n      return {\n        ...accum,\n        [team.id]: team,\n      }\n    }, {})\n    const nbTeams = await profileContract.methods.numberTeams().call()\n    const calls = []\n\n    for (let i = 1; i <= nbTeams; i++) {\n      calls.push(profileContract.methods.getTeamProfile(i).call)\n    }\n\n    const teamData = (await makeBatchRequest(calls)) as TeamResponse[]\n    const onChainTeamData = teamData.reduce((accum, team, index) => {\n      const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = team\n\n      return {\n        ...accum,\n        [index + 1]: {\n          name: teamName,\n          users: Number(numberUsers),\n          points: Number(numberPoints),\n          isJoinable,\n        },\n      }\n    }, {})\n\n    return merge({}, teamsById, onChainTeamData)\n  } catch (error) {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}