{"ast":null,"code":"import _slicedToArray from\"/Users/rp/Desktop/shift2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/rp/Desktop/shift2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React from\"react\";import styled from\"styled-components\";import{Button,Flex,Heading,IconButton,AddIcon,MinusIcon,useModal}from\"@pancakeswap-libs/uikit\";import useI18n from\"hooks/useI18n\";import useStake from\"hooks/useStake\";import useUnstake from\"hooks/useUnstake\";import{getBalanceNumber}from\"utils/formatBalance\";import DepositModal from\"../DepositModal\";import WithdrawModal from\"../WithdrawModal\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var IconButtonWrapper=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  svg {\\n    width: 20px;\\n  }\\n\"])));var StakeAction=function StakeAction(_ref){var stakedBalance=_ref.stakedBalance,tokenBalance=_ref.tokenBalance,tokenName=_ref.tokenName,pid=_ref.pid,addLiquidityUrl=_ref.addLiquidityUrl;var TranslateString=useI18n();var _useStake=useStake(pid),onStake=_useStake.onStake;var _useUnstake=useUnstake(pid),onUnstake=_useUnstake.onUnstake;var rawStakedBalance=getBalanceNumber(stakedBalance);var displayBalance=rawStakedBalance.toLocaleString();var _useModal=useModal(/*#__PURE__*/_jsx(DepositModal,{max:tokenBalance,onConfirm:onStake,tokenName:tokenName,addLiquidityUrl:addLiquidityUrl})),_useModal2=_slicedToArray(_useModal,1),onPresentDeposit=_useModal2[0];var _useModal3=useModal(/*#__PURE__*/_jsx(WithdrawModal,{max:stakedBalance,onConfirm:onUnstake,tokenName:tokenName})),_useModal4=_slicedToArray(_useModal3,1),onPresentWithdraw=_useModal4[0];var renderStakingButtons=function renderStakingButtons(){return rawStakedBalance===0?/*#__PURE__*/_jsx(Button,{onClick:onPresentDeposit,children:TranslateString(999,\"Stake LP\")}):/*#__PURE__*/_jsxs(IconButtonWrapper,{children:[/*#__PURE__*/_jsx(IconButton,{variant:\"tertiary\",onClick:onPresentWithdraw,mr:\"6px\",children:/*#__PURE__*/_jsx(MinusIcon,{color:\"primary\",width:\"14px\"})}),/*#__PURE__*/_jsx(IconButton,{variant:\"tertiary\",onClick:onPresentDeposit,children:/*#__PURE__*/_jsx(AddIcon,{color:\"primary\",width:\"14px\"})})]});};return/*#__PURE__*/_jsxs(Flex,{justifyContent:\"space-between\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(Heading,{color:rawStakedBalance===0?\"textDisabled\":\"text\",children:displayBalance}),renderStakingButtons()]});};export default StakeAction;","map":{"version":3,"sources":["/Users/rp/Desktop/shift2/src/views/Farms/components/FarmCard/StakeAction.tsx"],"names":["React","styled","Button","Flex","Heading","IconButton","AddIcon","MinusIcon","useModal","useI18n","useStake","useUnstake","getBalanceNumber","DepositModal","WithdrawModal","IconButtonWrapper","div","StakeAction","stakedBalance","tokenBalance","tokenName","pid","addLiquidityUrl","TranslateString","onStake","onUnstake","rawStakedBalance","displayBalance","toLocaleString","onPresentDeposit","onPresentWithdraw","renderStakingButtons"],"mappings":"kUAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CAEA,OACEC,MADF,CAEEC,IAFF,CAGEC,OAHF,CAIEC,UAJF,CAKEC,OALF,CAMEC,SANF,CAOEC,QAPF,KAQO,yBARP,CASA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,QAAP,KAAqB,gBAArB,CACA,MAAOC,CAAAA,UAAP,KAAuB,kBAAvB,CACA,OAASC,gBAAT,KAAiC,qBAAjC,CACA,MAAOC,CAAAA,YAAP,KAAyB,iBAAzB,CACA,MAAOC,CAAAA,aAAP,KAA0B,kBAA1B,C,wFAUA,GAAMC,CAAAA,iBAAiB,CAAGd,MAAM,CAACe,GAAV,qHAAvB,CAOA,GAAMC,CAAAA,WAA2C,CAAG,QAA9CA,CAAAA,WAA8C,MAM9C,IALJC,CAAAA,aAKI,MALJA,aAKI,CAJJC,YAII,MAJJA,YAII,CAHJC,SAGI,MAHJA,SAGI,CAFJC,GAEI,MAFJA,GAEI,CADJC,eACI,MADJA,eACI,CACJ,GAAMC,CAAAA,eAAe,CAAGd,OAAO,EAA/B,CADI,cAEgBC,QAAQ,CAACW,GAAD,CAFxB,CAEIG,OAFJ,WAEIA,OAFJ,iBAGkBb,UAAU,CAACU,GAAD,CAH5B,CAGII,SAHJ,aAGIA,SAHJ,CAKJ,GAAMC,CAAAA,gBAAgB,CAAGd,gBAAgB,CAACM,aAAD,CAAzC,CACA,GAAMS,CAAAA,cAAc,CAAGD,gBAAgB,CAACE,cAAjB,EAAvB,CANI,cAQuBpB,QAAQ,cACjC,KAAC,YAAD,EACE,GAAG,CAAEW,YADP,CAEE,SAAS,CAAEK,OAFb,CAGE,SAAS,CAAEJ,SAHb,CAIE,eAAe,CAAEE,eAJnB,EADiC,CAR/B,wCAQGO,gBARH,8BAgBwBrB,QAAQ,cAClC,KAAC,aAAD,EACE,GAAG,CAAEU,aADP,CAEE,SAAS,CAAEO,SAFb,CAGE,SAAS,CAAEL,SAHb,EADkC,CAhBhC,yCAgBGU,iBAhBH,eAwBJ,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CACjC,MAAOL,CAAAA,gBAAgB,GAAK,CAArB,cACL,KAAC,MAAD,EAAQ,OAAO,CAAEG,gBAAjB,UACGN,eAAe,CAAC,GAAD,CAAM,UAAN,CADlB,EADK,cAKL,MAAC,iBAAD,yBACE,KAAC,UAAD,EAAY,OAAO,CAAC,UAApB,CAA+B,OAAO,CAAEO,iBAAxC,CAA2D,EAAE,CAAC,KAA9D,uBACE,KAAC,SAAD,EAAW,KAAK,CAAC,SAAjB,CAA2B,KAAK,CAAC,MAAjC,EADF,EADF,cAIE,KAAC,UAAD,EAAY,OAAO,CAAC,UAApB,CAA+B,OAAO,CAAED,gBAAxC,uBACE,KAAC,OAAD,EAAS,KAAK,CAAC,SAAf,CAAyB,KAAK,CAAC,MAA/B,EADF,EAJF,GALF,CAcD,CAfD,CAiBA,mBACE,MAAC,IAAD,EAAM,cAAc,CAAC,eAArB,CAAqC,UAAU,CAAC,QAAhD,wBACE,KAAC,OAAD,EAAS,KAAK,CAAEH,gBAAgB,GAAK,CAArB,CAAyB,cAAzB,CAA0C,MAA1D,UACGC,cADH,EADF,CAIGI,oBAAoB,EAJvB,GADF,CAQD,CAvDD,CAyDA,cAAed,CAAAA,WAAf","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport BigNumber from \"bignumber.js\";\nimport {\n  Button,\n  Flex,\n  Heading,\n  IconButton,\n  AddIcon,\n  MinusIcon,\n  useModal,\n} from \"@pancakeswap-libs/uikit\";\nimport useI18n from \"hooks/useI18n\";\nimport useStake from \"hooks/useStake\";\nimport useUnstake from \"hooks/useUnstake\";\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport DepositModal from \"../DepositModal\";\nimport WithdrawModal from \"../WithdrawModal\";\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber;\n  tokenBalance?: BigNumber;\n  tokenName?: string;\n  pid?: number;\n  addLiquidityUrl?: string;\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`;\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n();\n  const { onStake } = useStake(pid);\n  const { onUnstake } = useUnstake(pid);\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance);\n  const displayBalance = rawStakedBalance.toLocaleString();\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={onStake}\n      tokenName={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n    />\n  );\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      onConfirm={onUnstake}\n      tokenName={tokenName}\n    />\n  );\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>\n        {TranslateString(999, \"Stake LP\")}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    );\n  };\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? \"textDisabled\" : \"text\"}>\n        {displayBalance}\n      </Heading>\n      {renderStakingButtons()}\n    </Flex>\n  );\n};\n\nexport default StakeAction;\n"]},"metadata":{},"sourceType":"module"}