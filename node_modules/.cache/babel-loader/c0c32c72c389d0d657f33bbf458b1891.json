{"ast":null,"code":"import _regeneratorRuntime from\"/Users/rp/Desktop/shift2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/rp/Desktop/shift2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/rp/Desktop/shift2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{getPointCenterIfoContract}from\"utils/contractHelpers\";import ifosList from\"config/constants/ifo\";import{campaignMap}from\"config/constants/campaigns\";import makeBatchRequest from\"./makeBatchRequest\";export var getAchievementTitle=function getAchievementTitle(campaign){switch(campaign.type){case\"ifo\":return{id:999,fallback:\"IFO Shopper: \".concat(campaign.title),data:{name:campaign.title}};default:return campaign.title;}};export var getAchievementDescription=function getAchievementDescription(campaign){switch(campaign.type){case\"ifo\":return{id:999,fallback:\"Committed more than $5 worth of LP in the \".concat(campaign.title,\" IFO\"),data:{name:campaign.title}};default:return campaign.description;}};/**\n * Checks if a wallet is eligble to claim points from valid IFO's\n */export var getClaimableIfoData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var ifoCampaigns,ifoCampaignAddresses,pointCenterContract,claimStatuses,claimableIfoData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:ifoCampaigns=ifosList.filter(function(ifoItem){return ifoItem.campaignId!==undefined;});ifoCampaignAddresses=ifoCampaigns.map(function(ifoItem){return ifoItem.address;});pointCenterContract=getPointCenterIfoContract();// Returns the claim status of every IFO with a campaign ID\n_context.next=5;return pointCenterContract.methods.checkClaimStatuses(account,ifoCampaignAddresses).call();case 5:claimStatuses=_context.sent;_context.next=8;return makeBatchRequest(claimStatuses.reduce(function(accum,claimStatus,index){if(claimStatus===true){return[].concat(_toConsumableArray(accum),[pointCenterContract.methods.ifos(ifoCampaignAddresses[index]).call]);}return accum;},[]));case 8:claimableIfoData=_context.sent;return _context.abrupt(\"return\",claimableIfoData.reduce(function(accum,claimableIfoDataItem){if(!campaignMap.has(claimableIfoDataItem.campaignId)){return accum;}var campaignMeta=campaignMap.get(claimableIfoDataItem.campaignId);var _ifoCampaigns$find=ifoCampaigns.find(function(ifoCampaign){return ifoCampaign.campaignId===claimableIfoDataItem.campaignId;}),address=_ifoCampaigns$find.address;return[].concat(_toConsumableArray(accum),[{address:address,id:claimableIfoDataItem.campaignId,type:\"ifo\",title:getAchievementTitle(campaignMeta),description:getAchievementDescription(campaignMeta),badge:campaignMeta.badge,points:Number(claimableIfoDataItem.numberPoints)}]);},[]));case 10:case\"end\":return _context.stop();}}},_callee);}));return function getClaimableIfoData(_x){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/rp/Desktop/shift2/src/utils/achievements.ts"],"names":["getPointCenterIfoContract","ifosList","campaignMap","makeBatchRequest","getAchievementTitle","campaign","type","id","fallback","title","data","name","getAchievementDescription","description","getClaimableIfoData","account","ifoCampaigns","filter","ifoItem","campaignId","undefined","ifoCampaignAddresses","map","address","pointCenterContract","methods","checkClaimStatuses","call","claimStatuses","reduce","accum","claimStatus","index","ifos","claimableIfoData","claimableIfoDataItem","has","campaignMeta","get","find","ifoCampaign","badge","points","Number","numberPoints"],"mappings":"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","sourcesContent":["import { Campaign } from \"config/constants/types\";\nimport { getPointCenterIfoContract } from \"utils/contractHelpers\";\nimport ifosList from \"config/constants/ifo\";\nimport { campaignMap } from \"config/constants/campaigns\";\nimport { Achievement, TranslatableText } from \"state/types\";\nimport makeBatchRequest from \"./makeBatchRequest\";\n\ninterface IfoMapResponse {\n  thresholdToClaim: string;\n  campaignId: string;\n  numberPoints: string;\n}\n\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case \"ifo\":\n      return {\n        id: 999,\n        fallback: `IFO Shopper: ${campaign.title}`,\n        data: {\n          name: campaign.title as string,\n        },\n      };\n    default:\n      return campaign.title;\n  }\n};\n\nexport const getAchievementDescription = (\n  campaign: Campaign\n): TranslatableText => {\n  switch (campaign.type) {\n    case \"ifo\":\n      return {\n        id: 999,\n        fallback: `Committed more than $5 worth of LP in the ${campaign.title} IFO`,\n        data: {\n          name: campaign.title as string,\n        },\n      };\n    default:\n      return campaign.description;\n  }\n};\n\n/**\n * Checks if a wallet is eligble to claim points from valid IFO's\n */\nexport const getClaimableIfoData = async (\n  account: string\n): Promise<Achievement[]> => {\n  const ifoCampaigns = ifosList.filter(\n    (ifoItem) => ifoItem.campaignId !== undefined\n  );\n  const ifoCampaignAddresses = ifoCampaigns.map((ifoItem) => ifoItem.address);\n  const pointCenterContract = getPointCenterIfoContract();\n\n  // Returns the claim status of every IFO with a campaign ID\n  const claimStatuses = (await pointCenterContract.methods\n    .checkClaimStatuses(account, ifoCampaignAddresses)\n    .call()) as boolean[];\n\n  // Get IFO data for all IFO's that are eligible to claim\n  const claimableIfoData = (await makeBatchRequest(\n    claimStatuses.reduce((accum, claimStatus, index) => {\n      if (claimStatus === true) {\n        return [\n          ...accum,\n          pointCenterContract.methods.ifos(ifoCampaignAddresses[index]).call,\n        ];\n      }\n\n      return accum;\n    }, [])\n  )) as IfoMapResponse[];\n\n  // Transform response to an Achievement\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\n      return accum;\n    }\n\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId);\n    const { address } = ifoCampaigns.find(\n      (ifoCampaign) =>\n        ifoCampaign.campaignId === claimableIfoDataItem.campaignId\n    );\n\n    return [\n      ...accum,\n      {\n        address,\n        id: claimableIfoDataItem.campaignId,\n        type: \"ifo\",\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: Number(claimableIfoDataItem.numberPoints),\n      },\n    ];\n  }, []);\n};\n"]},"metadata":{},"sourceType":"module"}