{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/shift2-fcb8bc041d1fedb7988290b70457fa426765e2f4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/shift2-fcb8bc041d1fedb7988290b70457fa426765e2f4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import Cookies from'js-cookie';import{getProfileContract,getPancakeRabbitContract}from'utils/contractHelpers';import{getTeam}from'state/teams/helpers';import nfts from'config/constants/nfts';import{transformProfileResponse}from'./helpers';var profileContract=getProfileContract();var rabbitContract=getPancakeRabbitContract();var profileApi=process.env.REACT_APP_API_PROFILE;var getUsername=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(address){var response,_yield$response$json,_yield$response$json$,username;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"\".concat(profileApi,\"/api/users/\").concat(address));case 3:response=_context.sent;if(response.ok){_context.next=6;break;}return _context.abrupt(\"return\",'');case 6:_context.next=8;return response.json();case 8:_yield$response$json=_context.sent;_yield$response$json$=_yield$response$json.username;username=_yield$response$json$===void 0?'':_yield$response$json$;return _context.abrupt(\"return\",username);case 14:_context.prev=14;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",'');case 17:case\"end\":return _context.stop();}}},_callee,null,[[0,14]]);}));return function getUsername(_x){return _ref.apply(this,arguments);};}();var getProfile=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address){var hasRegistered,profileResponse,_transformProfileResp,userId,points,teamId,tokenId,nftAddress,isActive,team,username,nft,bunnyId,profile;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return profileContract.methods.hasRegistered(address).call();case 3:hasRegistered=_context2.sent;if(hasRegistered){_context2.next=6;break;}return _context2.abrupt(\"return\",{hasRegistered:hasRegistered,profile:null});case 6:_context2.next=8;return profileContract.methods.getUserProfile(address).call();case 8:profileResponse=_context2.sent;_transformProfileResp=transformProfileResponse(profileResponse),userId=_transformProfileResp.userId,points=_transformProfileResp.points,teamId=_transformProfileResp.teamId,tokenId=_transformProfileResp.tokenId,nftAddress=_transformProfileResp.nftAddress,isActive=_transformProfileResp.isActive;_context2.next=12;return getTeam(teamId);case 12:team=_context2.sent;_context2.next=15;return getUsername(address);case 15:username=_context2.sent;if(!isActive){_context2.next=22;break;}_context2.next=19;return rabbitContract.methods.getBunnyId(tokenId).call();case 19:bunnyId=_context2.sent;nft=nfts.find(function(nftItem){return nftItem.bunnyId===Number(bunnyId);});// Save the preview image in a cookie so it can be used on the exchange\nCookies.set(\"profile_\".concat(address),{username:username,avatar:\"https://pancakeswap.finance/images/nfts/\".concat(nft.images.sm)},{domain:'pancakeswap.finance',secure:true,expires:30});case 22:profile={userId:userId,points:points,teamId:teamId,tokenId:tokenId,username:username,nftAddress:nftAddress,isActive:isActive,nft:nft,team:team};return _context2.abrupt(\"return\",{hasRegistered:hasRegistered,profile:profile});case 26:_context2.prev=26;_context2.t0=_context2[\"catch\"](0);return _context2.abrupt(\"return\",null);case 29:case\"end\":return _context2.stop();}}},_callee2,null,[[0,26]]);}));return function getProfile(_x2){return _ref2.apply(this,arguments);};}();export default getProfile;","map":{"version":3,"sources":["/Volumes/evo970/shift2-fcb8bc041d1fedb7988290b70457fa426765e2f4/src/state/profile/getProfile.ts"],"names":["Cookies","getProfileContract","getPancakeRabbitContract","getTeam","nfts","transformProfileResponse","profileContract","rabbitContract","profileApi","process","env","REACT_APP_API_PROFILE","getUsername","address","fetch","response","ok","json","username","getProfile","methods","hasRegistered","call","profile","getUserProfile","profileResponse","userId","points","teamId","tokenId","nftAddress","isActive","team","getBunnyId","bunnyId","nft","find","nftItem","Number","set","avatar","images","sm","domain","secure","expires"],"mappings":"yWAAA,MAAOA,CAAAA,OAAP,KAAoB,WAApB,CACA,OAASC,kBAAT,CAA6BC,wBAA7B,KAA6D,uBAA7D,CAGA,OAASC,OAAT,KAAwB,qBAAxB,CACA,MAAOC,CAAAA,IAAP,KAAiB,uBAAjB,CACA,OAASC,wBAAT,KAAyC,WAAzC,CAEA,GAAMC,CAAAA,eAAe,CAAGL,kBAAkB,EAA1C,CACA,GAAMM,CAAAA,cAAc,CAAGL,wBAAwB,EAA/C,CACA,GAAMM,CAAAA,UAAU,CAAGC,OAAO,CAACC,GAAR,CAAYC,qBAA/B,CAOA,GAAMC,CAAAA,WAAW,0FAAG,iBAAOC,OAAP,yNAEOC,CAAAA,KAAK,WAAIN,UAAJ,uBAA4BK,OAA5B,EAFZ,QAEVE,QAFU,kBAIXA,QAAQ,CAACC,EAJE,yDAKP,EALO,+BAQgBD,CAAAA,QAAQ,CAACE,IAAT,EARhB,sFAQRC,QARQ,CAQRA,QARQ,gCAQG,EARH,uDAUTA,QAVS,4FAYT,EAZS,uEAAH,kBAAXN,CAAAA,WAAW,4CAAjB,CAgBA,GAAMO,CAAAA,UAAU,2FAAG,kBAAON,OAAP,ySAEcP,CAAAA,eAAe,CAACc,OAAhB,CAAwBC,aAAxB,CAAsCR,OAAtC,EAA+CS,IAA/C,EAFd,QAETD,aAFS,mBAIVA,aAJU,2DAKN,CAAEA,aAAa,CAAbA,aAAF,CAAiBE,OAAO,CAAE,IAA1B,CALM,gCAQejB,CAAAA,eAAe,CAACc,OAAhB,CAAwBI,cAAxB,CAAuCX,OAAvC,EAAgDS,IAAhD,EARf,QAQTG,eARS,sCASmDpB,wBAAwB,CAACoB,eAAD,CAT3E,CASPC,MATO,uBASPA,MATO,CASCC,MATD,uBASCA,MATD,CASSC,MATT,uBASSA,MATT,CASiBC,OATjB,uBASiBA,OATjB,CAS0BC,UAT1B,uBAS0BA,UAT1B,CASsCC,QATtC,uBASsCA,QATtC,yBAUI5B,CAAAA,OAAO,CAACyB,MAAD,CAVX,SAUTI,IAVS,wCAWQpB,CAAAA,WAAW,CAACC,OAAD,CAXnB,SAWTK,QAXS,oBAgBXa,QAhBW,mDAiBSxB,CAAAA,cAAc,CAACa,OAAf,CAAuBa,UAAvB,CAAkCJ,OAAlC,EAA2CP,IAA3C,EAjBT,SAiBPY,OAjBO,gBAkBbC,GAAG,CAAG/B,IAAI,CAACgC,IAAL,CAAU,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACH,OAAR,GAAoBI,MAAM,CAACJ,OAAD,CAAvC,EAAV,CAAN,CAEA;AACAlC,OAAO,CAACuC,GAAR,mBACa1B,OADb,EAEE,CACEK,QAAQ,CAARA,QADF,CAEEsB,MAAM,mDAA6CL,GAAG,CAACM,MAAJ,CAAWC,EAAxD,CAFR,CAFF,CAME,CAAEC,MAAM,CAAE,qBAAV,CAAiCC,MAAM,CAAE,IAAzC,CAA+CC,OAAO,CAAE,EAAxD,CANF,EArBa,QA+BTtB,OA/BS,CA+BC,CACdG,MAAM,CAANA,MADc,CAEdC,MAAM,CAANA,MAFc,CAGdC,MAAM,CAANA,MAHc,CAIdC,OAAO,CAAPA,OAJc,CAKdX,QAAQ,CAARA,QALc,CAMdY,UAAU,CAAVA,UANc,CAOdC,QAAQ,CAARA,QAPc,CAQdI,GAAG,CAAHA,GARc,CASdH,IAAI,CAAJA,IATc,CA/BD,kCA2CR,CAAEX,aAAa,CAAbA,aAAF,CAAiBE,OAAO,CAAPA,OAAjB,CA3CQ,gGA6CR,IA7CQ,yEAAH,kBAAVJ,CAAAA,UAAU,8CAAhB,CAiDA,cAAeA,CAAAA,UAAf","sourcesContent":["import Cookies from 'js-cookie'\nimport { getProfileContract, getPancakeRabbitContract } from 'utils/contractHelpers'\nimport { Nft } from 'config/constants/types'\nimport { Profile } from 'state/types'\nimport { getTeam } from 'state/teams/helpers'\nimport nfts from 'config/constants/nfts'\nimport { transformProfileResponse } from './helpers'\n\nconst profileContract = getProfileContract()\nconst rabbitContract = getPancakeRabbitContract()\nconst profileApi = process.env.REACT_APP_API_PROFILE\n\nexport interface GetProfileResponse {\n  hasRegistered: boolean\n  profile?: Profile\n}\n\nconst getUsername = async (address: string): Promise<string> => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address}`)\n\n    if (!response.ok) {\n      return ''\n    }\n\n    const { username = '' } = await response.json()\n\n    return username\n  } catch (error) {\n    return ''\n  }\n}\n\nconst getProfile = async (address: string): Promise<GetProfileResponse> => {\n  try {\n    const hasRegistered = (await profileContract.methods.hasRegistered(address).call()) as boolean\n\n    if (!hasRegistered) {\n      return { hasRegistered, profile: null }\n    }\n\n    const profileResponse = await profileContract.methods.getUserProfile(address).call()\n    const { userId, points, teamId, tokenId, nftAddress, isActive } = transformProfileResponse(profileResponse)\n    const team = await getTeam(teamId)\n    const username = await getUsername(address)\n\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n    let nft: Nft\n    if (isActive) {\n      const bunnyId = await rabbitContract.methods.getBunnyId(tokenId).call()\n      nft = nfts.find((nftItem) => nftItem.bunnyId === Number(bunnyId))\n\n      // Save the preview image in a cookie so it can be used on the exchange\n      Cookies.set(\n        `profile_${address}`,\n        {\n          username,\n          avatar: `https://pancakeswap.finance/images/nfts/${nft.images.sm}`,\n        },\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\n      )\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      nftAddress,\n      isActive,\n      nft,\n      team,\n    } as Profile\n\n    return { hasRegistered, profile }\n  } catch (error) {\n    return null\n  }\n}\n\nexport default getProfile\n"]},"metadata":{},"sourceType":"module"}