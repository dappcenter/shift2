{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/rp/Desktop/death/LOU10_sourcecode/toModifyFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React,{useCallback,useRef}from'react';import styled from'styled-components';import{Heading,Card,CardBody,Flex,ArrowForwardIcon,Skeleton}from'@pancakeswap-libs/uikit';import{NavLink}from'react-router-dom';import useI18n from'hooks/useI18n';import BigNumber from'bignumber.js';import{QuoteToken}from'config/constants/types';import{useFarms,usePriceBnbBusd}from'state/hooks';import{BLOCKS_PER_YEAR,QUESTIONMARK_PER_BLOCK,QUESTIONMARK_POOL_PID}from'config';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledFarmStakingCard=styled(Card)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: auto;\\n  width: 100%;\\n\\n  \",\" {\\n    margin: 0;\\n    max-width: none;\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.mediaQueries.lg;});var CardMidContent=styled(Heading).attrs({size:'xl'})(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  line-height: 44px;\\n\"])));var EarnAPYCard=function EarnAPYCard(){var TranslateString=useI18n();var farmsLP=useFarms();var bnbPrice=usePriceBnbBusd();var maxAPY=useRef(Number.MIN_VALUE);var getHighestAPY=function getHighestAPY(){var activeFarms=farmsLP.filter(function(farm){return farm.pid!==0&&farm.multiplier!=='0X';});calculateAPY(activeFarms);return(maxAPY.current*100).toLocaleString('en-US').slice(0,-1);};var calculateAPY=useCallback(function(farmsToDisplay){var _farmsLP$find;var cakePriceVsBNB=new BigNumber(((_farmsLP$find=farmsLP.find(function(farm){return farm.pid===QUESTIONMARK_POOL_PID;}))===null||_farmsLP$find===void 0?void 0:_farmsLP$find.tokenPriceVsQuote)||0);farmsToDisplay.map(function(farm){if(!farm.tokenAmount||!farm.lpTotalInQuoteToken||!farm.lpTotalInQuoteToken){return farm;}var cakeRewardPerBlock=QUESTIONMARK_PER_BLOCK.times(farm.poolWeight);var cakeRewardPerYear=cakeRewardPerBlock.times(BLOCKS_PER_YEAR);var apy=cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken);if(farm.quoteTokenSymbol===QuoteToken.BUSD){apy=cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice);}else if(farm.quoteTokenSymbol===QuoteToken.QUESTIONMARK){apy=cakeRewardPerYear.div(farm.lpTotalInQuoteToken);}else if(farm.dual){var cakeApy=farm&&cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken);var dualApy=farm.tokenPriceVsQuote&&new BigNumber(farm.tokenPriceVsQuote).times(farm.dual.rewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken);apy=cakeApy&&dualApy&&cakeApy.plus(dualApy);}if(maxAPY.current<apy.toNumber())maxAPY.current=apy.toNumber();return apy;});},[bnbPrice,farmsLP]);return/*#__PURE__*/_jsx(StyledFarmStakingCard,{children:/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsx(Heading,{color:\"contrast\",size:\"lg\",children:\"Earn up to\"}),/*#__PURE__*/_jsx(CardMidContent,{color:\"#7645d9\",children:getHighestAPY()?\"\".concat(getHighestAPY(),\"% \").concat(TranslateString(736,'APR')):/*#__PURE__*/_jsx(Skeleton,{animation:\"pulse\",variant:\"rect\",height:\"44px\"})}),/*#__PURE__*/_jsxs(Flex,{justifyContent:\"space-between\",children:[/*#__PURE__*/_jsx(Heading,{color:\"contrast\",size:\"lg\",children:\"in Farms\"}),/*#__PURE__*/_jsx(NavLink,{exact:true,activeClassName:\"active\",to:\"/farms\",id:\"farm-apy-cta\",children:/*#__PURE__*/_jsx(ArrowForwardIcon,{mt:30,color:\"primary\"})})]})]})});};export default EarnAPYCard;","map":{"version":3,"sources":["/Users/rp/Desktop/death/LOU10_sourcecode/toModifyFarms/src/views/Home/components/EarnAPYCard.tsx"],"names":["React","useCallback","useRef","styled","Heading","Card","CardBody","Flex","ArrowForwardIcon","Skeleton","NavLink","useI18n","BigNumber","QuoteToken","useFarms","usePriceBnbBusd","BLOCKS_PER_YEAR","QUESTIONMARK_PER_BLOCK","QUESTIONMARK_POOL_PID","StyledFarmStakingCard","theme","mediaQueries","lg","CardMidContent","attrs","size","EarnAPYCard","TranslateString","farmsLP","bnbPrice","maxAPY","Number","MIN_VALUE","getHighestAPY","activeFarms","filter","farm","pid","multiplier","calculateAPY","current","toLocaleString","slice","farmsToDisplay","cakePriceVsBNB","find","tokenPriceVsQuote","map","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","times","poolWeight","cakeRewardPerYear","apy","div","quoteTokenSymbol","BUSD","QUESTIONMARK","dual","cakeApy","dualApy","rewardPerBlock","plus","toNumber"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { QuoteToken } from 'config/constants/types'\nimport { useFarms, usePriceBnbBusd } from 'state/hooks'\nimport { BLOCKS_PER_YEAR, QUESTIONMARK_PER_BLOCK, QUESTIONMARK_POOL_PID } from 'config'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPYCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n\n  const maxAPY = useRef(Number.MIN_VALUE)\n\n  const getHighestAPY = () => {\n    const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n\n    calculateAPY(activeFarms)\n\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1)\n  }\n\n  const calculateAPY = useCallback(\n    (farmsToDisplay) => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === QUESTIONMARK_POOL_PID)?.tokenPriceVsQuote || 0)\n\n      farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = QUESTIONMARK_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.QUESTIONMARK) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        if (maxAPY.current < apy.toNumber()) maxAPY.current = apy.toNumber()\n\n        return apy\n      })\n    },\n    [bnbPrice, farmsLP],\n  )\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn up to\n        </Heading>\n        <CardMidContent color=\"#7645d9\">\n          {getHighestAPY() ? (\n            `${getHighestAPY()}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPYCard\n"]},"metadata":{},"sourceType":"module"}