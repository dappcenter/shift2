{"ast":null,"code":"export let QuoteToken;\n\n(function (QuoteToken) {\n  QuoteToken[\"BNB\"] = \"BNB\";\n  QuoteToken[\"CAKE\"] = \"?\";\n  QuoteToken[\"SYRUP\"] = \"SYRUP\";\n  QuoteToken[\"BUSD\"] = \"BUSD\";\n  QuoteToken[\"TWT\"] = \"TWT\";\n  QuoteToken[\"UST\"] = \"UST\";\n  QuoteToken[\"ETH\"] = \"ETH\";\n  QuoteToken[\"COMP\"] = \"COMP\";\n  QuoteToken[\"SUSHI\"] = \"SUSHI\";\n  QuoteToken[\"TPT\"] = \"TPT\";\n  QuoteToken[\"?\"] = \"?\";\n  QuoteToken[\"QUESTIONMARK\"] = \"QUESTIONMARK\";\n})(QuoteToken || (QuoteToken = {}));\n\nexport let PoolCategory;\n\n(function (PoolCategory) {\n  PoolCategory[\"COMMUNITY\"] = \"Community\";\n  PoolCategory[\"CORE\"] = \"Core\";\n  PoolCategory[\"BINANCE\"] = \"Binance\";\n})(PoolCategory || (PoolCategory = {}));","map":{"version":3,"sources":["/Users/rp/Desktop/death/LOU10_sourcecode/toModifyFarms/src/config/constants/types.ts"],"names":["QuoteToken","PoolCategory"],"mappings":"AAyBA,WAAYA,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAeZ,WAAYC,YAAZ;;WAAYA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y","sourcesContent":["import { TranslatableText } from 'state/types'\r\n\r\nexport type IfoStatus = 'idle' | 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  tokenSymbol: string\r\n  releaseBlockNumber: number\r\n  campaignId?: string\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = '?',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n  'ETH' = 'ETH',\r\n  'COMP' = 'COMP',\r\n  'SUSHI' = 'SUSHI',\r\n  'TPT' = 'TPT',\r\n  '?' = '?',\r\n  'QUESTIONMARK' = 'QUESTIONMARK'\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isCommunity?: boolean\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  tokenName: string\r\n  tokenAddress: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  stakingTokenDecimals?: number\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n}\r\n\r\nexport type Images = {\r\n  lg: string\r\n  md: string\r\n  sm: string\r\n  ipfs?: string\r\n}\r\n\r\nexport type NftImages = {\r\n  blur?: string\r\n} & Images\r\n\r\nexport type NftVideo = {\r\n  webm: string\r\n  mp4: string\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  images: NftImages\r\n  sortOrder: number\r\n  bunnyId: number\r\n  video?: NftVideo\r\n}\r\n\r\nexport type TeamImages = {\r\n  alt: string\r\n} & Images\r\n\r\nexport type Team = {\r\n  id: number\r\n  name: string\r\n  description: string\r\n  isJoinable?: boolean\r\n  users: number\r\n  points: number\r\n  images: TeamImages\r\n  background: string\r\n  textColor: string\r\n}\r\n\r\nexport type CampaignType = 'ifo'\r\n\r\nexport type Campaign = {\r\n  id: string\r\n  type: CampaignType\r\n  title?: TranslatableText\r\n  description?: TranslatableText\r\n  badge?: string\r\n}\r\n"]},"metadata":{},"sourceType":"module"}